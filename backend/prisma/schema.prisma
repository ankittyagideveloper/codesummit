// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  image         String?
  role          UserRole        @default(USER)
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Problem       Problem[]
  Submission    Submission[]
  ProblemSolved ProblemSolved[]
  Playlist      Playlist[]
}

model Problem {
  id          String     @id @unique @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases         Json
  codeSnippets      Json
  referenceSolution Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Submission    Submission[]
  ProblemSolved ProblemSolved[]
  Playlist      Playlist?       @relation(fields: [playlistId], references: [id])
  playlistId    String?
}

model Submission {
  id             String           @id @unique @default(uuid())
  userId         String
  problemId      String
  sourceCode     Json
  language       String
  stdin          String?
  stdout         String?
  stderr         String?
  compileOutput  String?
  status         String
  memory         String?
  time           String?
  TestCaseResult TestCaseResult[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCaseResult {
  id            String   @id @unique @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createAt      DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model ProblemSolved {
  id        String   @id @unique @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId])
}

model Playlist {
  id          String    @id @unique @default(uuid())
  userId      String
  name        String
  description String
  problems    Problem[]

  user User @relation(fields: [userId], references: [id])
}
